/*

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë
*/

const { getRandom } = require("../System/Function");
const { webp2mp4File } = require("../System/Uploader");
const { toAudio } = require("../System/File-Converter");
const { exec } = require("child_process");
const fs = require("fs");
const PDFDocument = require("pdfkit");
let { GraphOrg } = require("../System/Uploader");

const util = require("util");
let mergedCommands = [
  "toimg",
  "toimage",
  "togif",
  "tomp4",
  "tomp3",
  "toaudio",
  "tourl",
  "topdf",
  "imgtopdf",
];

module.exports = {
  name: "converters",
  alias: [...mergedCommands],
  uniquecommands: [
    "toimg",
    "togif",
    "tomp4",
    "tomp3",
    "toaudio",
    "tourl",
    "topdf",
    "imgtopdf",
  ],
  description: "‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂ö ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±",
  start: async (
    Pendragon,
    m,
    { inputCMD, text, quoted, doReact, prefix, mime }
  ) => {
    switch (inputCMD) {
      case "toimg":
      case "toimage":
        if (!m.quoted && !/webp/.test(mime)) {
          await doReact("‚ùî");
          return m.reply(
            `*‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì‡∂ö‡∂ª‡∂±‡∂∫* ‡∂±‡∑ú‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∑É‡∑ä‡∂ß‡∑í‡∂ö‡∂ª‡∂∫‡∂ö‡∂ß mention ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.`
          );
        }
        await doReact("üé¥");
        let mediaMess = await Pendragon.downloadAndSaveMediaMessage(quoted);
        let ran = await getRandom(".png");
        exec(`ffmpeg -i ${mediaMess} ${ran}`, (err) => {
          fs.unlinkSync(mediaMess);
          if (err) {
            Pendragon.sendMessage(
              m.from,
              {
                text: `‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª *‡∑É‡∂¢‡∑ì‡∑Ä‡∑í‡∂ö‡∂ª‡∂±‡∂∫* ‡∂±‡∑ú‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø sticker ‡∂ë‡∂ö‡∂ß mention ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂∏ ! \n\n ‡∑Ñ‡∑ù ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± *${prefix}togif* / *${prefix}tomp4*  to process *Animated* sticker !`,
              },
              { quoted: m }
            );
            return;
          }
          let buffer = fs.readFileSync(ran);
          Pendragon.sendMessage(
            m.from,
            { image: buffer, caption: `_Converted by:_  *${botName}*\n` },
            { quoted: m }
          );
          fs.unlinkSync(ran);
        });
        break;

      case "tomp4":
        if (!m.quoted && !/webp/.test(mime)) {
          await doReact("‚ùî");
          return reply(
            `‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª *Animation* Sticker ‡∂ë‡∂ö‡∂ö‡∂ß reply ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± ‡∂ë‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂ú‡∑ê‡∂±‡∑í‡∂∏‡∂ß ‡∑Ñ‡∑ê‡∂ö.!`
          );
        }
        await doReact("üé¥");
        let mediaMess2 = await Pendragon.downloadAndSaveMediaMessage(quoted);
        let webpToMp4 = await webp2mp4File(mediaMess2);

        await Pendragon.sendMessage(
          m.from,
          {
            video: { url: webpToMp4.result },
            caption: `_Converted by:_  *${botName}*\n`,
          },
          { quoted: m }
        );
        fs.unlinkSync(mediaMess2);
        break;

      case "togif":
        if (!m.quoted && !/webp/.test(mime)) {
          await doReact("‚ùî");
          return m.reply(
            `‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª reply ‡∂ö‡∂ª‡∂±‡∑ä‡∂± *Animated* sticker ‡∂ë‡∂ö‡∂ö‡∂ß ‡∂ë‡∂∫ it to gif ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ê‡∂ö. !`
          );
        }
        await doReact("üé¥");
        let mediaMess3 = await Pendragon.downloadAndSaveMediaMessage(quoted);
        let webpToMp42 = await webp2mp4File(mediaMess3);

        await Pendragon.sendMessage(
          m.from,
          {
            video: { url: webpToMp42.result },
            caption: `_Converted by:_  *${botName}*\n`,
            gifPlayback: true,
          },
          { quoted: m }
        );
        fs.unlinkSync(mediaMess3);

        break;

      case "tomp3":
        if (/document/.test(mime)) {
          await doReact("‚ùå");
          return m.reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± *${prefix}tomp3*`
          );
        }
        if (!/video/.test(mime) && !/audio/.test(mime)) {
          await doReact("‚ùå");
          return reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± *${prefix}tomp3*`
          );
        }
        if (!m.quoted) {
          await doReact("‚ùî");
          return m.reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± ${prefix}tomp3`
          );
        }
        await doReact("üé∂");
        let media = await quoted.download();
        await Pendragon.sendPresenceUpdate("recording", m.from);
        let audio = await toAudio(media, "mp4");
        Pendragon.sendMessage(
          m.from,
          {
            document: audio,
            mimetype: "audio/mpeg",
            fileName: `Converted By ${botName} ${m.id}.mp3`,
          },
          { quoted: m }
        );

        break;

      case "toaudio":
        if (/document/.test(mime)) {
          await doReact("‚ùå");
          return m.reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± *${prefix}tomp3*`
          );
        }
        if (!/video/.test(mime) && !/audio/.test(mime)) {
          await doReact("‚ùå");
          return m.reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± *${prefix}tomp3*`
          );
        }
        if (!m.quoted) {
          await doReact("‚ùî");
          return m.reply(
            `‡∂î‡∂∂‡∂ß MP3 ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä/‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∂∫ ‡∂Ω‡∑ô‡∑É‡∑ä ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± ${prefix}tomp3`
          );
        }
        await doReact("üé∂");
        let media2 = await quoted.download();
        await Pendragon.sendPresenceUpdate("recording", m.from);
        let audio2 = await toAudio(media2, "mp4");
        Pendragon.sendMessage(
          m.from,
          { audio: audio2, mimetype: "audio/mpeg" },
          { quoted: m }
        );
        break;

      case "tourl":
        if (!m.quoted) {
          await doReact("‚ùî");
          return m.reply(
            `Plese provide an *Image* / *Video* to generate a link! With Caption ${prefix}tourl`
          );
        }
        let media5 = await Pendragon.downloadAndSaveMediaMessage(quoted);
        if (/image/.test(mime)) {
          await doReact("üîó");
          let anu = await GraphOrg(media5);
          m.reply(`*Generated Image URL:* \n\n${util.format(anu)}\n`);
        } else if (/video/.test(mime)) {
          await doReact("‚ñ∂Ô∏è");
          try {
            let anu = await GraphOrg(media5);
            m.reply(`*Generated Video URL:* \n\n${util.format(anu)}\n`);
          } catch (e) {
            await doReact("‚ùå");
            await fs.unlinkSync(media5);
            return Pendragon.sendMessage(
              m.from,
              {
                text: `*‡∂î‡∂∫‡∂ú‡∑ö video ‡∂ë‡∂ö‡∑ô size ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂©‡∑í‡∂∫‡∑í!*\n\n*‡∑Ä‡∑ê‡∂©‡∑í‡∂∏ video size:* 5MB`,
              },
              { quoted: m }
            );
          }
        } else {
          await doReact("‚ùå");
          return m.reply(
            `‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∂∂‡∑ê‡∂Ø‡∑í‡∂∫‡∂ö‡∑ä ‡∂¢‡∂±‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß *‡∂¥‡∑í‡∂Ç‡∂≠‡∑î‡∂ª‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∑Ä‡∑ì‡∂©‡∑ì‡∂∫‡∑ù‡∑Ä‡∂ö‡∑ä* ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±!`
          );
        }
        await fs.unlinkSync(media5);
        break;

      case "topdf":
      case "imgtopdf":
        if (/image/.test(mime)) {
          await doReact("üìë");
          let mediaMess4 = await Pendragon.downloadAndSaveMediaMessage(quoted);

          async function generatePDF(path) {
            return new Promise((resolve, reject) => {
              const doc = new PDFDocument();

              const imageFilePath = mediaMess4.replace(/\\/g, "/");
              doc.image(imageFilePath, 0, 0, {
                width: 612, // It will make your image to horizontally fill the page - Change it as per your requirement
                align: "center",
                valign: "center",
              });

              doc.pipe(fs.createWriteStream(path));

              doc.on("end", () => {
                resolve(path);
              });

              doc.end();
            });
          }

          try {
            let randomFileName = `./${Math.floor(
              Math.random() * 1000000000
            )}.pdf`;
            const pdfPATH = randomFileName;
            await generatePDF(pdfPATH);
            pdf = fs.readFileSync(pdfPATH);

            setTimeout(async () => {
              let pdf = fs.readFileSync(pdfPATH);

              Pendragon.sendMessage(
                m.from,
                {
                  document: pdf,
                  fileName: `Converted By ${botName}.pdf`,
                },
                { quoted: m }
              );

              fs.unlinkSync(mediaMess4);
              fs.unlinkSync(pdfPATH);
            }, 1000);
          } catch (error) {
            await doReact("‚ùå");
            console.error(error);
            return m.reply(
              `‡∂ª‡∑ñ‡∂¥‡∂∫ PDF ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Å‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.`
            );
          }
        } else {
          await doReact("‚ùî");
          return m.reply(`PDF ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂Ø‡∑Ñ‡∑è *image* ‡∂ë‡∂ö‡∂ö‡∂ß ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!`);
        }
        break;

      default:
        break;
    }
  },
};
